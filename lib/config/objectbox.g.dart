// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../domain/entities/annotation.dart';
import '../domain/entities/consultation.dart';
import '../domain/entities/doctor.dart';
import '../domain/entities/document.dart';
import '../domain/entities/patient.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1954417455135903593),
      name: 'Consultation',
      lastPropertyId: const obx_int.IdUid(9, 5853969057493210329),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6981030928349399290),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2185144289833971466),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 591531738265852518),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 144614764880441125),
            name: 'dateTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3184513886661190099),
            name: 'duration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1889245535686007530),
            name: 'value',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 12643732112855530),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8585471975098633400),
            name: 'patientId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 8196349327755732588),
            relationTarget: 'Patient'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5853969057493210329),
            name: 'doctorId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 7996620853202627082),
            relationTarget: 'Doctor')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6589057988402214074),
      name: 'Doctor',
      lastPropertyId: const obx_int.IdUid(8, 8108134857413526052),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3933818292314874031),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 584467266828027737),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5904526564062833813),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8141261800045809040),
            name: 'photoUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3035628516434095674),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6608775942431946362),
            name: 'crfa',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 457308790030943149),
            name: 'specialty',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8108134857413526052),
            name: 'address',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'consultations',
            srcEntity: 'Consultation',
            srcField: 'doctor')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5894913375927753702),
      name: 'Patient',
      lastPropertyId: const obx_int.IdUid(7, 7084805928520916682),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1684051504906776607),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4230244372338902733),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(3, 3610276734300169516)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6613581924477705183),
            name: 'email',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(4, 1839138909313388302)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2921673588245155823),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8579281934854708367),
            name: 'cpf',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(5, 2836424538992017426)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8333948979212999197),
            name: 'rg',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(6, 3915641518726470406)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7084805928520916682),
            name: 'photoUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 6181149915685481576),
            name: 'annotations',
            targetId: const obx_int.IdUid(4, 3097366409491271828))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'consultations',
            srcEntity: 'Consultation',
            srcField: 'patient')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 3097366409491271828),
      name: 'Annotation',
      lastPropertyId: const obx_int.IdUid(4, 5001342545866670785),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 680533773120012523),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8846827651470924071),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4011316444242635022),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5001342545866670785),
            name: 'patientId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(9, 3951663070511930001),
            relationTarget: 'Patient')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 3931668597836579698),
            name: 'documents',
            targetId: const obx_int.IdUid(5, 2183886181836851805))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 2183886181836851805),
      name: 'Document',
      lastPropertyId: const obx_int.IdUid(4, 957183089741635419),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3197499952919875436),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8382180535830734811),
            name: 'bytes',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3010788601427637539),
            name: 'annotationId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(10, 4759235638833371495),
            relationTarget: 'Annotation'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 957183089741635419),
            name: 'fileName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 2183886181836851805),
      lastIndexId: const obx_int.IdUid(10, 4759235638833371495),
      lastRelationId: const obx_int.IdUid(2, 6181149915685481576),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [904994285721374892, 8647010289486896385],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Consultation: obx_int.EntityDefinition<Consultation>(
        model: _entities[0],
        toOneRelations: (Consultation object) =>
            [object.patient, object.doctor],
        toManyRelations: (Consultation object) => {},
        getId: (Consultation object) => object.id,
        setId: (Consultation object, int id) {
          object.id = id;
        },
        objectToFB: (Consultation object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          final valueOffset = fbb.writeString(object.value);
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.dateTime?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.duration);
          fbb.addOffset(5, valueOffset);
          fbb.addOffset(6, statusOffset);
          fbb.addInt64(7, object.patient.targetId);
          fbb.addInt64(8, object.doctor.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final dateTimeParam = dateTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateTimeValue);
          final durationParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = Consultation(
              id: idParam,
              title: titleParam,
              description: descriptionParam,
              dateTime: dateTimeParam,
              duration: durationParam,
              value: valueParam,
              status: statusParam);
          object.patient.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.patient.attach(store);
          object.doctor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.doctor.attach(store);
          return object;
        }),
    Doctor: obx_int.EntityDefinition<Doctor>(
        model: _entities[1],
        toOneRelations: (Doctor object) => [],
        toManyRelations: (Doctor object) => {
              obx_int.RelInfo<Consultation>.toOneBacklink(9, object.id,
                      (Consultation srcObject) => srcObject.doctor):
                  object.consultations
            },
        getId: (Doctor object) => object.id,
        setId: (Doctor object, int id) {
          object.id = id;
        },
        objectToFB: (Doctor object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final photoUrlOffset = object.photoUrl == null
              ? null
              : fbb.writeString(object.photoUrl!);
          final phoneOffset = fbb.writeString(object.phone);
          final crfaOffset = fbb.writeString(object.crfa);
          final specialtyOffset = fbb.writeString(object.specialty);
          final addressOffset = fbb.writeString(object.address);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, photoUrlOffset);
          fbb.addOffset(4, phoneOffset);
          fbb.addOffset(5, crfaOffset);
          fbb.addOffset(6, specialtyOffset);
          fbb.addOffset(7, addressOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final photoUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final crfaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final specialtyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = Doctor(
              id: idParam,
              name: nameParam,
              email: emailParam,
              photoUrl: photoUrlParam,
              phone: phoneParam,
              crfa: crfaParam,
              specialty: specialtyParam,
              address: addressParam);
          obx_int.InternalToManyAccess.setRelInfo<Doctor>(
              object.consultations,
              store,
              obx_int.RelInfo<Consultation>.toOneBacklink(
                  9, object.id, (Consultation srcObject) => srcObject.doctor));
          return object;
        }),
    Patient: obx_int.EntityDefinition<Patient>(
        model: _entities[2],
        toOneRelations: (Patient object) => [],
        toManyRelations: (Patient object) => {
              obx_int.RelInfo<Patient>.toMany(2, object.id): object.annotations,
              obx_int.RelInfo<Consultation>.toOneBacklink(8, object.id,
                      (Consultation srcObject) => srcObject.patient):
                  object.consultations
            },
        getId: (Patient object) => object.id,
        setId: (Patient object, int id) {
          object.id = id;
        },
        objectToFB: (Patient object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final phoneOffset = fbb.writeString(object.phone);
          final cpfOffset =
              object.cpf == null ? null : fbb.writeString(object.cpf!);
          final rgOffset =
              object.rg == null ? null : fbb.writeString(object.rg!);
          final photoUrlOffset = object.photoUrl == null
              ? null
              : fbb.writeString(object.photoUrl!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, cpfOffset);
          fbb.addOffset(5, rgOffset);
          fbb.addOffset(6, photoUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final photoUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final cpfParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final rgParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = Patient(
              id: idParam,
              name: nameParam,
              email: emailParam,
              phone: phoneParam,
              photoUrl: photoUrlParam,
              cpf: cpfParam,
              rg: rgParam);
          obx_int.InternalToManyAccess.setRelInfo<Patient>(object.annotations,
              store, obx_int.RelInfo<Patient>.toMany(2, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Patient>(
              object.consultations,
              store,
              obx_int.RelInfo<Consultation>.toOneBacklink(
                  8, object.id, (Consultation srcObject) => srcObject.patient));
          return object;
        }),
    Annotation: obx_int.EntityDefinition<Annotation>(
        model: _entities[3],
        toOneRelations: (Annotation object) => [object.patient],
        toManyRelations: (Annotation object) => {
              obx_int.RelInfo<Annotation>.toMany(1, object.id): object.documents
            },
        getId: (Annotation object) => object.id,
        setId: (Annotation object, int id) {
          object.id = id;
        },
        objectToFB: (Annotation object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(3, object.patient.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Annotation(id: idParam, text: textParam)
            ..createdAt = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          object.patient.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.patient.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Annotation>(object.documents,
              store, obx_int.RelInfo<Annotation>.toMany(1, object.id));
          return object;
        }),
    Document: obx_int.EntityDefinition<Document>(
        model: _entities[4],
        toOneRelations: (Document object) => [object.annotation],
        toManyRelations: (Document object) => {},
        getId: (Document object) => object.id,
        setId: (Document object, int id) {
          object.id = id;
        },
        objectToFB: (Document object, fb.Builder fbb) {
          final bytesOffset =
              object.bytes == null ? null : fbb.writeListInt8(object.bytes!);
          final fileNameOffset = fbb.writeString(object.fileName);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, bytesOffset);
          fbb.addInt64(2, object.annotation.targetId);
          fbb.addOffset(3, fileNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final fileNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final bytesParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 6) as Uint8List?;
          final object =
              Document(id: idParam, fileName: fileNameParam, bytes: bytesParam);
          object.annotation.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.annotation.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Consultation] entity fields to define ObjectBox queries.
class Consultation_ {
  /// See [Consultation.id].
  static final id =
      obx.QueryIntegerProperty<Consultation>(_entities[0].properties[0]);

  /// See [Consultation.title].
  static final title =
      obx.QueryStringProperty<Consultation>(_entities[0].properties[1]);

  /// See [Consultation.description].
  static final description =
      obx.QueryStringProperty<Consultation>(_entities[0].properties[2]);

  /// See [Consultation.dateTime].
  static final dateTime =
      obx.QueryDateProperty<Consultation>(_entities[0].properties[3]);

  /// See [Consultation.duration].
  static final duration =
      obx.QueryIntegerProperty<Consultation>(_entities[0].properties[4]);

  /// See [Consultation.value].
  static final value =
      obx.QueryStringProperty<Consultation>(_entities[0].properties[5]);

  /// See [Consultation.status].
  static final status =
      obx.QueryStringProperty<Consultation>(_entities[0].properties[6]);

  /// See [Consultation.patient].
  static final patient =
      obx.QueryRelationToOne<Consultation, Patient>(_entities[0].properties[7]);

  /// See [Consultation.doctor].
  static final doctor =
      obx.QueryRelationToOne<Consultation, Doctor>(_entities[0].properties[8]);
}

/// [Doctor] entity fields to define ObjectBox queries.
class Doctor_ {
  /// See [Doctor.id].
  static final id =
      obx.QueryIntegerProperty<Doctor>(_entities[1].properties[0]);

  /// See [Doctor.name].
  static final name =
      obx.QueryStringProperty<Doctor>(_entities[1].properties[1]);

  /// See [Doctor.email].
  static final email =
      obx.QueryStringProperty<Doctor>(_entities[1].properties[2]);

  /// See [Doctor.photoUrl].
  static final photoUrl =
      obx.QueryStringProperty<Doctor>(_entities[1].properties[3]);

  /// See [Doctor.phone].
  static final phone =
      obx.QueryStringProperty<Doctor>(_entities[1].properties[4]);

  /// See [Doctor.crfa].
  static final crfa =
      obx.QueryStringProperty<Doctor>(_entities[1].properties[5]);

  /// See [Doctor.specialty].
  static final specialty =
      obx.QueryStringProperty<Doctor>(_entities[1].properties[6]);

  /// See [Doctor.address].
  static final address =
      obx.QueryStringProperty<Doctor>(_entities[1].properties[7]);

  /// see [Doctor.consultations]
  static final consultations =
      obx.QueryBacklinkToMany<Consultation, Doctor>(Consultation_.doctor);
}

/// [Patient] entity fields to define ObjectBox queries.
class Patient_ {
  /// See [Patient.id].
  static final id =
      obx.QueryIntegerProperty<Patient>(_entities[2].properties[0]);

  /// See [Patient.name].
  static final name =
      obx.QueryStringProperty<Patient>(_entities[2].properties[1]);

  /// See [Patient.email].
  static final email =
      obx.QueryStringProperty<Patient>(_entities[2].properties[2]);

  /// See [Patient.phone].
  static final phone =
      obx.QueryStringProperty<Patient>(_entities[2].properties[3]);

  /// See [Patient.cpf].
  static final cpf =
      obx.QueryStringProperty<Patient>(_entities[2].properties[4]);

  /// See [Patient.rg].
  static final rg =
      obx.QueryStringProperty<Patient>(_entities[2].properties[5]);

  /// See [Patient.photoUrl].
  static final photoUrl =
      obx.QueryStringProperty<Patient>(_entities[2].properties[6]);

  /// see [Patient.annotations]
  static final annotations =
      obx.QueryRelationToMany<Patient, Annotation>(_entities[2].relations[0]);

  /// see [Patient.consultations]
  static final consultations =
      obx.QueryBacklinkToMany<Consultation, Patient>(Consultation_.patient);
}

/// [Annotation] entity fields to define ObjectBox queries.
class Annotation_ {
  /// See [Annotation.id].
  static final id =
      obx.QueryIntegerProperty<Annotation>(_entities[3].properties[0]);

  /// See [Annotation.text].
  static final text =
      obx.QueryStringProperty<Annotation>(_entities[3].properties[1]);

  /// See [Annotation.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Annotation>(_entities[3].properties[2]);

  /// See [Annotation.patient].
  static final patient =
      obx.QueryRelationToOne<Annotation, Patient>(_entities[3].properties[3]);

  /// see [Annotation.documents]
  static final documents =
      obx.QueryRelationToMany<Annotation, Document>(_entities[3].relations[0]);
}

/// [Document] entity fields to define ObjectBox queries.
class Document_ {
  /// See [Document.id].
  static final id =
      obx.QueryIntegerProperty<Document>(_entities[4].properties[0]);

  /// See [Document.bytes].
  static final bytes =
      obx.QueryByteVectorProperty<Document>(_entities[4].properties[1]);

  /// See [Document.annotation].
  static final annotation =
      obx.QueryRelationToOne<Document, Annotation>(_entities[4].properties[2]);

  /// See [Document.fileName].
  static final fileName =
      obx.QueryStringProperty<Document>(_entities[4].properties[3]);
}
